pdf(file = paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = ""), height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
for(loc in unique(ihme_hospital_admissions$location)[36]){
pdf(file = paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = ""), height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
loc <- "Florida"
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
pdf(file = paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = ""), height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
filename
for(loc in unique(ihme_hospital_admissions$location)){
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
source('~/Documents/covid-ensemble/analysis/EDA.R', echo=TRUE)
for(loc in unique(ihme_hospital_admissions$location)){
print(loc)
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
for(loc in unique(ihme_hospital_admissions$location)){
print(loc)
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
for(loc in unique(ihme_hospital_admissions$location)){
print(1)
print(loc)
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
loc <- "Delaware"
print(1)
print(loc)
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
hme_hospital_admissions[which(ihme_hospital_admissions$location == loc),]
ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),]
unique(ihme_hospital_admissions$location)
#################################################################
## Compare IHME model progression over time #####################
#################################################################
ihme_hospital_admissions <- model_outputs[which(model_outputs$output_name == "hospital admissions per day" &
model_outputs$model_name == "IHME COVID-19 Model" &
model_outputs$date >= "2020-03-01" &
model_outputs$date <= "2020-07-01"),]
names(ihme_hospital_admissions)
unique(ihme_hospital_admissions$location)
ihme_hospital_admissions$location
#################################################################
## Load required packages #######################################
#################################################################
library(ggplot2)
library(scales)
#################################################################
## Load datasets and set fixed parameters #######################
#################################################################
model_outputs <- read.delim("data/model_outputs.txt", stringsAsFactors = FALSE)
model_runs <- read.delim("data/model_runs.txt", stringsAsFactors = FALSE)
#################################################################
## Format data ##################################################
#################################################################
model_outputs$date <- as.Date(model_outputs$date)
#################################################################
## Create master dataset: runs ##################################
#################################################################
model_outputs <- merge(model_outputs, model_runs, by = "model_run_id", all.x = TRUE, all.y = FALSE)
model_outputs$model_run_description <- paste(model_outputs$model_name, " (version ", model_outputs$model_snapshot_date, ")", sep = "")
model_outputs$date <- as.Date(model_outputs$date)
#################################################################
## Compare IHME model progression over time #####################
#################################################################
ihme_hospital_admissions <- model_outputs[which(model_outputs$output_name == "hospital admissions per day" &
model_outputs$model_name == "IHME COVID-19 Model" &
model_outputs$date >= "2020-03-01" &
model_outputs$date <= "2020-07-01"),]
ihme_hospital_admissions$location
head(ihme_hospital_admissions)
head(model_outputs)
which(model_outputs$output_name == "hospital admissions per day" &
model_outputs$model_name == "IHME COVID-19 Model" &
model_outputs$date >= "2020-03-01" &
model_outputs$date <= "2020-07-01")
which(model_outputs$output_name == "hospital admissions per day" &
model_outputs$model_name == "IHME COVID-19 Model")
is(model_outputs$date)
model_outputs$date >= "2020-03-01"
model_outputs$date
#################################################################
## Load required packages #######################################
#################################################################
library(ggplot2)
library(scales)
#################################################################
## Load datasets and set fixed parameters #######################
#################################################################
model_outputs <- read.delim("data/model_outputs.txt", stringsAsFactors = FALSE)
model_runs <- read.delim("data/model_runs.txt", stringsAsFactors = FALSE)
#################################################################
## Format data ##################################################
#################################################################
model_outputs$date <- as.Date(model_outputs$date)
model_outputs$
#################################################################
## Create master dataset: runs ##################################
#################################################################
model_outputs <- merge(model_outputs, model_runs, by = "model_run_id", all.x = TRUE, all.y = FALSE)
model_outputs$model_run_description <- paste(model_outputs$model_name, " (version ", model_outputs$model_snapshot_date, ")", sep = "")
model_outputs$date <- as.Date(model_outputs$date)
View(model_outputs)
#################################################################
## Load required packages #######################################
#################################################################
library(ggplot2)
library(scales)
#################################################################
## Load datasets and set fixed parameters #######################
#################################################################
model_outputs <- read.delim("data/model_outputs.txt", stringsAsFactors = FALSE)
model_runs <- read.delim("data/model_runs.txt", stringsAsFactors = FALSE)
#################################################################
## Format dat
View(model_outputs)
head(as.Date(model_outputs$date))
head(as.Date(model_outputs$date, format = "%m/%d/%y"))
#################################################################
## Load required packages #######################################
#################################################################
library(ggplot2)
library(scales)
#################################################################
## Load datasets and set fixed parameters #######################
#################################################################
model_outputs <- read.delim("data/model_outputs.txt", stringsAsFactors = FALSE)
model_runs <- read.delim("data/model_runs.txt", stringsAsFactors = FALSE)
#################################################################
## Format data ##################################################
#################################################################
model_outputs$date <- as.Date(model_outputs$date, format = "%m/%d/%y")
model_outputs <- merge(model_outputs, model_runs, by = "model_run_id", all.x = TRUE, all.y = FALSE)
model_outputs$model_run_description <- paste(model_outputs$model_name, " (version ", model_outputs$model_snapshot_date, ")", sep = "")
model_outputs$date <- as.Date(model_outputs$date)
#################################################################
## Compare IHME model progression over time #####################
#################################################################
ihme_hospital_admissions <- model_outputs[which(model_outputs$output_name == "hospital admissions per day" &
model_outputs$model_name == "IHME COVID-19 Model" &
model_outputs$date >= "2020-03-01" &
model_outputs$date <= "2020-07-01"),]
for(loc in unique(ihme_hospital_admissions$location)){
print(1)
print(loc)
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
unique(ihme_hospital_admissions$location)
loc <- "Utah"
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
dev.off()
dev.off()
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
dev.off()
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
loc
rm(loc)
for(loc in unique(ihme_hospital_admissions$location)){
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
dev.off()
}
loc <- "Utah"
ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw()
for(loc in unique(ihme_hospital_admissions$location)){
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
print(ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw())
dev.off()
}
table(model_outputs$output_name)
View(ihme_hospital_admissions)
ihme_cumulative_fatalities <- model_outputs[which(model_outputs$output_name == "cumulative fatalities" &
model_outputs$model_name == "IHME COVID-19 Model" &
model_outputs$date >= "2020-03-01" &
model_outputs$date <= "2020-07-01"),]
for(loc in unique(ihme_hospital_admissions$location)){
filename <- paste("analysis/static_figures/IHME_comparison_", loc, ".pdf", sep = "")
pdf(file = filename, height = 3.5, width = 5.5)
print(ggplot(ihme_hospital_admissions[which(ihme_hospital_admissions$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Daily hospital admissions (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected daily hospital admissions\nIHME Model (", loc, ")", sep = "" )) +
theme_bw())
print(ggplot(ihme_cumulative_fatalities[which(ihme_cumulative_fatalities$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Cumulative fatalities (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected cumulative fatalities\nIHME Model (", loc, ")", sep = "" )) +
theme_bw())
dev.off()
}
# covid-ensemble
ihme_cumulative_fatalities <- model_outputs[which(model_outputs$output_name == "cumulative fatalities" &
model_outputs$model_name == "IHME COVID-19 Model" &
model_outputs$date >= "2020-03-01" &
model_outputs$date <= "2020-07-01"),]
print(ggplot(ihme_cumulative_fatalities[which(ihme_cumulative_fatalities$location == loc),],
aes(x = date, y = value, color = model_snapshot_date)) +
geom_line(size = 1) +
scale_y_continuous(label = comma) +
scale_color_manual(values = rev(c("#2b8cbe",  "#a6bddb"))) +
guides(color = guide_legend(title = "Model Snapshot date")) +
ylab(paste("Cumulative fatalities (", loc, ")", sep = "")) +
xlab("") +
ggtitle(paste("Projected cumulative fatalities\nIHME Model (", loc, ")", sep = "" )) +
theme_bw())
####################################
model_run_id <- 5
file_name <- "model_runs/1_ihme/model_export/Hospitalization_all_locs_04_07.csv"
#################################################################
## Load required packages #######################################
#################################################################
#################################################################
## Load datasets and set fixed parameters #######################
#################################################################
## read in new dataset of IHME exported data
ihme <- read.csv(file_name, stringsAsFactors = FALSE)
## read in models (file that tracks all models)
models <- read.delim("data/models.txt", stringsAsFactors = FALSE)
## read in model_runs (file that tracks model runs)
model_runs <- read.delim("data/model_runs.txt", stringsAsFactors = FALSE)
## read in model_outputs (file that tracks model outputs)
model_outputs <- read.delim("data/model_outputs.txt", stringsAsFactors = FALSE)
## read in outputs (file that uniquely identifies each distinct output tracked across models)
outputs <- read.delim("data/outputs.txt", stringsAsFactors = FALSE)
## IHME model ID is always 1, model name is always whatever model_id 1 is named in the file data/models.txt
model_id <- 1
model_name <- models$model_name[which(models$model_id == 1)]
## set date as a date
ihme$date <- as.Date(ihme$date)
model_outputs$date <- as.Date(model_outputs$date)
## for consistency with other data sources for now, consistently code IHME data locations as "US" vs. "United States of America"
## IHME changed how these data were reported as of 4/5/20 (using full name vs. partial name)
## todo: map to FIPS codes and country ISO codes for locations
if(any(ihme$location == "United States of America")){
ihme$location[which(ihme$location == "United States of America")] <- "US"
}
## exclude some specific elements of IHME data that are only tracked ih IHME export and won't be
## comparable to results of other models
ihme <- ihme[-which(ihme$location %in% c("King and Snohomish Counties (excluding Life Care Center), WA",
"Life Care Center, Kirkland, WA",
"Other Counties, WA")),]
if((!model_run_id %in% model_outputs$model_run_id[model_outputs$output_id == 1])){
model_outputs <- rbind.data.frame(
model_outputs,
cbind.data.frame("model_run_id" = model_run_id,
"output_id" = 1,
"output_name" = "cumulative fatalities",
"date" = ihme$date,
"location" = ihme$location,
"value" = ihme$totdea_mean,
"notes" = "based on data export from model as of 4/1/2020, note that not all death estimates are rounded to nearest whole number")
)
}
if((!model_run_id %in% model_outputs$model_run_id[model_outputs$output_id == 7])){
model_outputs <- rbind.data.frame(
model_outputs,
cbind.data.frame("model_run_id" = model_run_id,
"output_id" = 7,
"output_name" = "fatalities per day",
"date" = ihme$date,
"location" = ihme$location,
"value" = ihme$deaths_mean,
"notes" = "based on data export from model as of 4/1/2020, note that not all death estimates are rounded to nearest whole number")
)
}
if((!model_run_id %in% model_outputs$model_run_id[model_outputs$output_id == 3])){
model_outputs <- rbind.data.frame(
model_outputs,
cbind.data.frame("model_run_id" = model_run_id,
"output_id" = 3,
"output_name" = "ICU beds per day",
"date" = ihme$date,
"location" = ihme$location,
"value" = ihme$totdea_mean,
"notes" = "based on data export from model as of 4/1/2020, note that not all ICU bed demand estimates are rounded to nearest whole number")
)
}
if((!model_run_id %in% model_outputs$model_run_id[model_outputs$output_id == 4])){
model_outputs <- rbind.data.frame(
model_outputs,
cbind.data.frame("model_run_id" = model_run_id,
"output_id" = 4,
"output_name" = "ventilators per day",
"date" = ihme$date,
"location" = ihme$location,
"value" = ihme$InvVen_mean,
"notes" = "based on data export from model as of 4/1/2020, note that ventilator demand is not rounded to the nearest number")
)
}
if((!model_run_id %in% model_outputs$model_run_id[model_outputs$output_id == 5])){
model_outputs <- rbind.data.frame(
model_outputs,
cbind.data.frame("model_run_id" = model_run_id,
"output_id" = 5,
"output_name" = "hospital admissions per day",
"date" = ihme$date,
"location" = ihme$location,
"value" = ihme$admis_mean,
"notes" = "based on data export from model as of 4/1/2020, note that hospital admission counts are not rounded to the nearest number")
)
}
if((!model_run_id %in% model_outputs$model_run_id[model_outputs$output_id == 6])){
model_outputs <- rbind.data.frame(
model_outputs,
cbind.data.frame("model_run_id" = model_run_id,
"output_id" = 6,
"output_name" = "ICU admissions per day",
"date" = ihme$date,
"location" = ihme$location,
"value" = ihme$newICU_mean,
"notes" = "based on data export from model as of 4/1/2020, note that ICU admission counts are not rounded to the nearest number")
)
}
write.table(model_outputs, file='data/model_outputs.txt', quote = FALSE, sep='\t', row.names = FALSE)
